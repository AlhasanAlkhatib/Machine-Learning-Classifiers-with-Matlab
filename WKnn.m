function [konfizyon,trainedClassifier, validationAccuracy] = trainClassifier(trainingData,K,Kfold)
[N,F]=size(trainingData);
AA=0;AN=0;NA=0;NN=0;

% trainClassifier(trainingData)
%  returns a trained classifier and its accuracy.
%  This code recreates the classification model trained in
%  Classification Learner app.
%
%   Input:
%       trainingData: the training data of same data type as imported
%        in the app (table or matrix).
%
%   Output:
%       trainedClassifier: a struct containing the trained classifier.
%        The struct contains various fields with information about the
%        trained classifier.
%
%       trainedClassifier.predictFcn: a function to make predictions
%        on new data. It takes an input of the same form as this training
%        code (table or matrix) and returns predictions for the response.
%        If you supply a matrix, include only the predictors columns (or
%        rows).
%
%       validationAccuracy: a double containing the accuracy in
%        percent. In the app, the History list displays this
%        overall accuracy score for each model.
%
%  Use the code to train the model with new data.
%  To retrain your classifier, call the function from the command line
%  with your original data or new data as the input argument trainingData.
%
%  For example, to retrain a classifier trained with the original data set
%  T, enter:
%    [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
%  To make predictions with the returned 'trainedClassifier' on new data T,
%  use
%    yfit = trainedClassifier.predictFcn(T)
%
%  To automate training the same classifier with new data, or to learn how
%  to programmatically train classifiers, examine the generated code.

% Auto-generated by MATLAB on 15-Jan-2019 16:34:25


% Extract predictors and response
% This code processes the data into the right shape for training the
% classifier.
inputTable = trainingData;
predictorNames = {'SwingingTime', 'CountofSwings', 'AngularVelocity', 'AmplituteRatio', 'RelaxationIndex', 'NormalizedRelaxationIndex', 'RFIntegratedEmg', 'RFMeanAbsoluteValue', 'RFSimpleSquareIntegral', 'RFVarianceOfEmg', 'RFRootMeanSquare', 'RFZeroCrossing', 'BFIntegratedEmg', 'BFMeanAbsoluteValue', 'BFSimpleSquareIntegral', 'BFVarianceOfEmg', 'BFRootMeanSquare', 'BFZeroCrossing', 'RFMeanFrequency', 'RFMedianFrequency', 'RFPeakFrequency', 'RFMeanPower', 'RFTotalPower', 'BFMeanFrequency', 'BFMedianFrequency', 'BFPeakFrequency', 'BFMeanPower', 'BFTotalPower'};
predictors = inputTable(:, predictorNames);
response = inputTable.DiseaseStage;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
classificationKNN = fitcknn(...
    predictors, ...
    response, ...
    'Distance', 'Euclidean', ...
    'Exponent', [], ...
    'NumNeighbors', K, ...
    'DistanceWeight', 'SquaredInverse', ...
    'Standardize', true, ...
    'ClassNames', {'A1';'A2'; 'N1'});

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
knnPredictFcn = @(x) predict(classificationKNN, x);
trainedClassifier.predictFcn = @(x) knnPredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'SwingingTime', 'CountofSwings', 'AngularVelocity', 'AmplituteRatio', 'RelaxationIndex', 'NormalizedRelaxationIndex', 'RFIntegratedEmg', 'RFMeanAbsoluteValue', 'RFSimpleSquareIntegral', 'RFVarianceOfEmg', 'RFRootMeanSquare', 'RFZeroCrossing', 'BFIntegratedEmg', 'BFMeanAbsoluteValue', 'BFSimpleSquareIntegral', 'BFVarianceOfEmg', 'BFRootMeanSquare', 'BFZeroCrossing', 'RFMeanFrequency', 'RFMedianFrequency', 'RFPeakFrequency', 'RFMeanPower', 'RFTotalPower', 'BFMeanFrequency', 'BFMedianFrequency', 'BFPeakFrequency', 'BFMeanPower', 'BFTotalPower'};
trainedClassifier.ClassificationKNN = classificationKNN;
trainedClassifier.About = 'This struct is a trained classifier exported from Classification Learner R2016a.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedClassifier''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% classifier.
inputTable = trainingData;
predictorNames = {'SwingingTime', 'CountofSwings', 'AngularVelocity', 'AmplituteRatio', 'RelaxationIndex', 'NormalizedRelaxationIndex', 'RFIntegratedEmg', 'RFMeanAbsoluteValue', 'RFSimpleSquareIntegral', 'RFVarianceOfEmg', 'RFRootMeanSquare', 'RFZeroCrossing', 'BFIntegratedEmg', 'BFMeanAbsoluteValue', 'BFSimpleSquareIntegral', 'BFVarianceOfEmg', 'BFRootMeanSquare', 'BFZeroCrossing', 'RFMeanFrequency', 'RFMedianFrequency', 'RFPeakFrequency', 'RFMeanPower', 'RFTotalPower', 'BFMeanFrequency', 'BFMedianFrequency', 'BFPeakFrequency', 'BFMeanPower', 'BFTotalPower'};
predictors = inputTable(:, predictorNames);
response = inputTable.DiseaseStage;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationKNN, 'KFold', Kfold);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');

% Compute validation predictions and scores
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);
R=cell2mat(response);
VP=cell2mat(validationPredictions);

for i=1:N
   if R(i,1)=='A' &&  VP(i,1)=='A'
       AA=AA+1;
   elseif R(i,1)=='A' &&  VP(i,1)=='N'
       AN=AN+1;
   elseif R(i,1)=='N' &&  VP(i,1)=='A'
       NA=NA+1;
   elseif R(i,1)=='N' &&  VP(i,1)=='N'
       NN=NN+1;
   end 
end
konfizyon=zeros(2,2);
konfizyon(1,1)=AA/32;konfizyon(1,2)=AN/32;konfizyon(2,1)=NA/17;konfizyon(2,2)=NN/17;

